## OSI

### 物理层

主要解决两台物理机之间的通信，通过**二进制比特流**的传输来实现，二进制数据表现为**电流电压上的强弱**，到达目的地再转化为**二进制机器码**。网卡、集线器工作在这一层。

### 数据链路层

**在不可靠的物理介质上提供可靠的传输**，接收来自物理层的位流形式的数据，并**封装成帧**，传送到上一层；同样，也将来自上层的数据帧，拆装为位流形式的数据转发到物理层。这一层在物理层提供的比特流的基础上，通过差错控制、流量控制方法，**使有差错的物理线路变为无差错的数据链路**。提供**物理地址寻址**功能。交换机工作在这一层。

### 网络层

将**网络地址翻译成对应的物理地址**，并决定如何将数据从发送方路由到接收方，通过路由选择算法为分组通过通信子网**选择最佳路径**。路由器工作在这一层。

### 传输层

传输层提供了进程间的逻辑通信，传输层向高层用户屏蔽了下面网络层的核心细节，使应用程序看起来像是**在两个传输层实体之间有一条端到端的逻辑通信信道**。

### 会话层

建立会话：**身份验证，权限鉴定**等； 保持会话：对该会话进行维护，在会话维持期间两者可以随时使用这条会话传输局； 断开会话：当应用程序或应用层规定的超时时间到期后，OSI会话层才会释放这条会话。

### 表示层

对数据格式进行编译，对**收到或发出的数据根据应用层的特征进行处理**，如处理为文字、图片、音频、视频、文档等，还可以对压缩文件进行解压缩、对加密文件进行解密等。

### 应用层

提供应用层协议，如HTTP协议，FTP协议等等，方便应用程序之间进行通信。



## TCPIP

- 网络接口层
- 网际层
- 运输层
- 应用层

![tcpip_osi](D:\MyWorkBench\ComputerNetworking\picture\tcpip_osi.png)

![tcpip stack](D:\MyWorkBench\ComputerNetworking\picture\tcpip stack.png)







## TCP UDP区别

TCP作为**面向流**的协议，提供可靠的、**面向连接**的运输服务，并且提供点对点通信

UDP作为**面向报文**的协议，**不提供可靠交付**，并且**不需要连接**，不仅仅对点对点，也支持多播和广播

## 为什么TCP可靠

- TCP有三次握手建立连接，四次挥手关闭连接的机制

- 滑动窗口和拥塞控制算法。

- 最最关键的是还保留超时重传的机制。 

- 对于每份报文也存在校验，保证每份报文可靠性。

## 为什么UDP不可靠

UDP面向数据报无连接的

数据报发出去，就不保留数据备份了， 仅仅在IP数据报头部加入校验和复用

UDP没有服务器和客户端的概念

UDP报文过长的话是交给IP切成小段，如果某段报文废了就废了。

## TCP粘包

TCP是面向流协议，发送的单位是字节流，因此会将多个小尺寸数据被封装在一个tcp报文中发出去的可能性。 可以简单的理解成客户端调用了两次send，服务器端一个recv就把信息都读出来了。

粘包演示：https://zhuanlan.zhihu.com/p/77275039

粘包处理方法：固定发送信息长度，或在两个信息之间加入分隔符。

## TCP滑动窗口

滑动窗口是传输层进行流量控制的一种措施，接收方通过通告发 送方自己的窗口大小，从而控制发送方的发送速度，防止发送方发送速度过快而导致自己被淹没。

## TCP重传

- 超时重传：一段时间都没有收到ack，则触发超时重传。但是**超时重传时间（RTO）**估算比较复杂，是根据实验调出的公式，总的来说是围绕**包的往返时间（RTT）**估算的，但会根据网络情况动态变化。例如如果超时重传的包也超时了，则RTO需要加倍。因为说明此时网络情况不好
- 快速重传：不以时间驱动，以发送方收到的ack驱动。
  - 例如发一堆包，包1、3、4、5都到了，2丢包。则发送方连续收到3次同样的ack（2），则触发重传包2。
  - 问题在于发送端不知道应该重传一个2，还是2之后所有的包。
- Sack方法：接收方在发现丢包时，会把现在已经**接收到的、后面的**包的范围塞在ack的sack字段中，表明这些包已经接收到了。然后发送方在接收到3次同样的ack后，可以根据sack直到需要重传什么部分
- D-Sack：sack除了在接收方收不到正确的包，用于表达已经接收到的后面的包以外，在一些情况下也可以表达重复收到的包
  - ack丢包时：发送方超时重传，则接收方会受到重复的包，则在sack也放入重复的包的范围，这样发送方知道是ack丢包了
  - 发送方包延迟时：接收方会因为网络延迟收不到正确的包，发送重复的ack，导致发送方触发快速重传。最后延迟的包到，接收方会收到重复的，因此在sack中也塞入重复的包。发送发则知道是网络延迟的问题。

https://www.cnblogs.com/xiaolincoding/p/12732052.html